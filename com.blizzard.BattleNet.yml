app-id: com.blizzard.BattleNet
branch: stable
sdk: org.wine.Sdk
runtime: org.wine.Platform
runtime-version: '10.5'
# rename-desktop-file: BattleNet.desktop # Not needed because desktop file is already named com.blizzard.BattleNet
# rename-icon: BattleNet                 # Not needed because icons are already named com.blizzard.BattleNet
command: BattleNet.sh
finish-args:
  - --allow=multiarch                                      # Access to 32bit libraries (For running 32bit executables)
  # - --allow=devel                                          # Uses full SDK as the runtime (Access to more debugging tools and other libs)
  # - --allow=bluetooth                                      # Access to bluetooth
  # - --device=all                                           # Access to all devices
  - --device=dri                                           # Access to DRI for OpenGL rendering
  - --device=input                                         # Access to input devices (Controllers, etc)
  # - --socket=wayland                                       # Access to Wayland socket for display
  - --socket=fallback-x11                                  # Access to X11 socket for display (Incase wayland doesn't work)
  - --socket=pulseaudio                                    # Access to pulse audio socket for sound
  - --share=network                                        # Access to networking
  - --share=ipc                                            # Access to host IPC namespace
  - --talk-name=org.freedesktop.ScreenSaver                # Can talk to Screensaver (Allows preventing Screensaver)
  # - --system-talk-name=org.freedesktop.UDisks2             # Can manage storage devices directly
  # - --system-talk-name=org.freedesktop.NetworkManager      # Can manage network directly
  # - --filesystem=host:ro                                   # Read access to common host directories
  - --filesystem=xdg-run/app/com.discordapp.Discord:create # Read/write access to Discord's running instance (Required for setting up Discord rich presence)
  - --filesystem=xdg-run/gamescope-0:ro                    # Read access to Gamescope's running instance (Required for Gamescope on Steam Deck)
  # - --env=WINEARCH=win32                                   # Set Wine to 32bit mode (64bit mode is default)
  - --env=WINEPREFIX=/var/data/wine                        # Set prefix location

inherit-extensions:
  - org.freedesktop.Platform.Compat.i386       # 32bit Linux compatibility
  - org.freedesktop.Platform.Compat.i386.Debug # 32bit Linux compatibility debug
  - org.freedesktop.Platform.GL                # OpenGL
  - org.freedesktop.Platform.GL32              # 32bit OpenGL
  - org.freedesktop.Platform.GL32.Debug        # 32bit OpenGL Debug
  - org.freedesktop.Platform.VAAPI.Intel       # Intel VAAPI
  - org.freedesktop.Platform.VAAPI.Intel.i386  # 32bit Intel VAAPI
  - org.freedesktop.Platform.ffmpeg-full       # FFmpeg
  - org.freedesktop.Platform.ffmpeg_full.i386  # 32bit FFmpeg

modules:
  # Setting up required stuff
  - name: Setup
    buildsystem: simple
    build-commands:
      - |
        # Make directories needed by extensions
        mkdir -p ${FLATPAK_DEST}/lib/i386-linux-gnu                        # 32bit Linux compatibility
        mkdir -p ${FLATPAK_DEST}/lib/debug/lib/i386-linux-gnu              # 32bit Linux compatibility debug
        mkdir -p ${FLATPAK_DEST}/lib/x86_64-linux-gnu/GL                   # OpenGL
        mkdir -p ${FLATPAK_DEST}/lib/i386-linux-gnu/GL                     # 32bit OpenGL
        mkdir -p ${FLATPAK_DEST}/lib/debug/lib/i386-linux-gnu/GL           # 32bit OpenGL Debug
        mkdir -p ${FLATPAK_DEST}/lib/i386-linux-gnu/dri/intel-vaapi-driver # 32bit Intel VAAPI
        mkdir -p ${FLATPAK_DEST}/lib/ffmpeg                                # FFmpeg
        mkdir -p ${FLATPAK_DEST}/lib32/ffmpeg                              # 32bit FFmpeg
        mkdir -p ${FLATPAK_DEST}/extensions

        mkdir -p ${FLATPAK_DEST}/bin # Make directory needed for binaries

        mkdir -p ${FLATPAK_DEST}/share/icons/hicolor/{16x16,24x24,32x32,48x48,64x64,128x128,256x256,scalable}/apps # Make directories needed for icons

  # Icoutils for extracting icos from exes
  - name: Icoutils
    buildsystem: simple
    sources:
      - type: archive
        url: http://savannah.nongnu.org/download/icoutils/icoutils-0.32.3.tar.bz2
        sha256: 17abe02d043a253b68b47e3af69c9fc755b895db68fdc8811786125df564c6e0

    build-commands:
      - |
        ./configure --prefix=${FLATPAK_DEST} # Generate makefile with prefix set to Flatpak root (/app for an App)
        make -j`nproc --ignore=2`            # Build using the number of available cores minus 2
        make install

  # ImageMagick for converting icos pngs
  - name: ImageMagick
    buildsystem: simple
    sources:
      - type: git
        url: https://github.com/ImageMagick/ImageMagick.git
        tag: 7.1.1-36

    build-commands:
      - |
        ./configure --prefix=${FLATPAK_DEST} # Generate makefile with prefix set to Flatpak root (/app for an App)
        make -j`nproc --ignore=2`            # Build using the number of available cores minus 2
        make install

  - name: Battle.net
    sources:
      # Battle.net setup exe to be ran with Wine (Downloaded to /app/extra when user is installing because of extra-data)
      - type: extra-data
        url: https://www.battle.net/download/getInstallerForGame?os=win&version=LIVE&gameProgram=BATTLENET_APP
        sha256: 002f33fee7b8a159058368b7e93e492931c4ca72e90660bdb2691bcd62fedd3c
        size: 4925568
        filename: BattleNetSetup.exe

      # Script that is automatically ran when user is installing, after extra-data is downloaded
      - type: script
        dest-filename: apply_extra
        commands:
          - |
            wrestool -x --output=BattleNet.ico -t14 BattleNetSetup.exe # Extract ico from exe
            magick BattleNet.ico BattleNet.png                         # Convert ico to png
            # magick BattleNet.ico BattleNet.svg                         # Convert ico to svg TODO: Figure out why this doesn't work

            # Move images to icon directories
            install -Dm644 BattleNet-0.png ./export/share/icons/hicolor/128x128/apps/com.blizzard.BattleNet.png
            install -Dm644 BattleNet-1.png ./export/share/icons/hicolor/16x16/apps/com.blizzard.BattleNet.png
            install -Dm644 BattleNet-2.png ./export/share/icons/hicolor/24x24/apps/com.blizzard.BattleNet.png
            install -Dm644 BattleNet-3.png ./export/share/icons/hicolor/256x256/apps/com.blizzard.BattleNet.png
            install -Dm644 BattleNet-4.png ./export/share/icons/hicolor/32x32/apps/com.blizzard.BattleNet.png
            install -Dm644 BattleNet-5.png ./export/share/icons/hicolor/48x48/apps/com.blizzard.BattleNet.png
            install -Dm644 BattleNet-6.png ./export/share/icons/hicolor/64x64/apps/com.blizzard.BattleNet.png
            # install -Dm644 BattleNet.svg ./export/share/icons/hicolor/scalable/apps/com.blizzard.BattleNet.svg

      # Windows registry file that sets Wine not to lose focus of cursor when clicking outside of the window (needed for Hearthstone)
      - type: file
        path: Registry/WineGraphics.reg

      # Script that is ran everytime the final Flatpak starts
      - type: file
        path: Scripts/BattleNet.sh

      # Initial icon (For storefront metadata) (Will be replaced with extracted/converted Battle.net image when user installs)
      - type: file
        path: Icons/com.blizzard.BattleNet.png

      - type: file
        path: DesktopEntries/com.blizzard.BattleNet.desktop

      - type: file
        path: com.blizzard.BattleNet.metainfo.xml

    buildsystem: simple
    build-commands:
      - |
        ln -s ${FLATPAK_DEST}/extra/BattleNetSetup.exe ${FLATPAK_DEST}/bin/BattleNetSetup.exe # Symlink to BattleNetSetup.exe that is to be downloaded to /app/extra when user installs
        install -Dm744 apply_extra ${FLATPAK_DEST}/bin/
        install -Dm644 WineGraphics.reg -t ${FLATPAK_DEST}/share/
        install -Dm744 BattleNet.sh -t ${FLATPAK_DEST}/bin/
        install -Dm644 com.blizzard.BattleNet.png -t ${FLATPAK_DEST}/share/icons/hicolor/256x256/apps/
        install -Dm644 com.blizzard.BattleNet.desktop -t ${FLATPAK_DEST}/share/applications/
        install -Dm644 com.blizzard.BattleNet.metainfo.xml -t ${FLATPAK_DEST}/share/metainfo/

